<!-- -*- mode: markdown -*- -->
# Data Structures

## CBNData
+ id: 2 (required, number) - Id of the CBN
+ name: cgc_b234ac2 (required, string) - Name of the binary
+ root_id: 1 (number) - Id of root node, if present
+ parent_id: 1 (number) - Id of parent node, if present
+ parent_path: 1, 2 (array[number]) - Ids of the ancestors, if present
+ blob: `Q2lhbyBzb25vIHVuIGJpbmFyaW8hCg==` - Binary data base64 encoded
+ created_at: `2015-08-05T08:40:51.620Z`
+ updated_at: `2015-08-05T08:40:51.620Z`

## CBNDataRequest
+ name: cgc_b234ac2 (required, string) - Name of the binary
+ parent_id: 1 (number) - Id of parent node. If `undefined` node will be a root node
+ blob: `Q2lhbyBzb25vIHVuIGJpbmFyaW8hCg==` - Binary data base64 encoded

## CBNDataList (array)
+ (CBNData)


# Group Challenge Binary Nodes

Challenge Binaries (CBs) are organized as a tree structure.

The root of the tree is the original un-patched binary provided by CGC API,
and every new version is stored as a child of the originating node.

Nodes are called Challenge Binary Node or simply CBN.

## Challenge Binary Node [/cbns/{cbn_id}]

+ Parameters

    + cbn_id: `1` (number) - The id of the Challenge Binary Node.

### Get CBN [GET]

Retrieve a single CBN.

+ Response 200 (application/json)

    + Headers

            Location: /cbns/2

    + Attributes (CBNData)

+ Response 404 (application/json)

    + Body

            {
                "errors": ["Challenge Binary Node not found"]
            }

## Challenge Binary Nodes Collection [/cbns{?name,parent_id}]

### List CBNs [GET]

List all CBNs, optionally filtered by parameters.

+ Parameters

    + name: `xxx` (string) - Name of the binary.
    + parent_id: `1` (number) - Id of parent CBN.

+ Response 200 (application/json)

    + Attributes (CBNDataList)

### Create CBN [POST]

Create a new CBN.

+ Request (application/json)

    + Attributes (CBNDataRequest)

+ Response 201 (application/json)

    + Attributes (CBNData)

+ Response 422 (application/json)

    There were errors creating the resource.

    + Body

            {
                "errors": [...]
            }
