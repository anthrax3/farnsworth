#!/usr/bin/env python2
# -*- coding: utf-8 -*-

from __future__ import absolute_import, unicode_literals

from datetime import datetime

from peewee import FloatField, BlobField, CharField, DateTimeField, ForeignKeyField

from .base import BaseModel
from .challenge_set import ChallengeSet
from .crash import Crash
from .job import Job
from ..peewee_extensions import EnumField

"""Exploit model"""


class Exploit(BaseModel):
    """Exploit model"""
    cs = ForeignKeyField(ChallengeSet, related_name='exploits')
    job = ForeignKeyField(Job, related_name='exploits')
    blob = BlobField()
    pov_type = EnumField(choices=['type1', 'type2'], enum_name='enum_pov_type')
    method = EnumField(choices=['unclassified',
                                'exploration',
                                'circumstantial',
                                'shellcode',
                                'rop',
                                'fuzzer',
                                'backdoor'],
                       default='unclassified', enum_name='enum_exploitation_method', null=False)
    reliability = FloatField(default=0.0)
    c_code = BlobField(null=True)
    crash = ForeignKeyField(Crash, related_name="exploits", null=True)

    def submit_to(self, team, throws, round=None):
        """Save submission at specified round. If round is None use current."""
        from .exploit_fielding import ExploitFielding
        from .round import Round
        if round is None:
            round = Round.current_round()
        return ExploitFielding.create(exploit=self, submission_round=round,
                                      throws=throws, team=team)
