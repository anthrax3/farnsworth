#!/usr/bin/env python2
# -*- coding: utf-8 -*-

from __future__ import absolute_import, unicode_literals

from datetime import datetime

from peewee import FloatField, BlobField, CharField, DateTimeField, ForeignKeyField

from .base import BaseModel
from .challenge_set import ChallengeSet
from .job import Job
from ..peewee_extensions import EnumField
from .round import Round

"""Exploit model"""


class Exploit(BaseModel):
    """Exploit model"""
    cs = ForeignKeyField(ChallengeSet, related_name='exploits')
    job = ForeignKeyField(Job, related_name='exploits')
    blob = BlobField()
    pov_type = EnumField(choices=['type1', 'type2'], enum_name='enum_pov_type')
    submitted_at = DateTimeField(null=True)
    submitted_teams = CharField(null=True)      # This should not be a CharField
    method = EnumField(choices=['unclassified', 'circumstantial', 'shellcode', 'rop'],
                       default='unclassified', enum_name='enum_exploitation_method', null=False)
    reliability = FloatField(default=0.0)
    c_code = BlobField()

    def submitted_to(self, teams):
        """Update submission timestamp and team"""
        self.submitted_at = datetime.now()
        self.submitted_teams = teams
        self.save()

    @property
    def submissions(self):
        """Return list of submissions"""
        if self.submitted_at is not None:
            round_ = Round.at_timestamp(self.submitted_at)
            return [{'id': self.id,
                     'round': round_.num,
                     'team': self.submitted_teams,
                     'type': self.pov_type,
                     'submitted_at': str(self.submitted_at)}]
        else:
            return []
