#!/usr/bin/env python2
# -*- coding: utf-8 -*-

from __future__ import absolute_import, unicode_literals

import time
import os

from nose.tools import *
from peewee import IntegrityError

from . import setup_each, teardown_each
from farnsworth.models import (ChallengeSet,
                               Exploit,
                               ExploitSubmissionCable,
                               RexJob,
                               Round,
                               Team)

class TestExploitSubmissionCable:
    def setup(self):
        setup_each()

    def teardown(self):
        teardown_each()

    def test_process_and_unprocessed(self):
        cs = ChallengeSet.create(name="foo")
        team = Team.create(name="opponent")
        exploit = Exploit.create(cs=cs, job=RexJob.create(), pov_type="type1",
                                 blob="abc", c_code="exploit it")
        Round.create(num=0)

        cable = ExploitSubmissionCable.create(team=team, cs=cs, exploit=exploit, throws=10, round=Round.current_round())

        assert_equals(len(ExploitSubmissionCable.unprocessed()), 1)

        cable.process()
        assert_equals(len(ExploitSubmissionCable.unprocessed()), 0)

    def test_most_recent(self):
        cs = ChallengeSet.create(name="foo")
        team = Team.create(name="opponent")
        exploit = Exploit.create(cs=cs, job=RexJob.create(), pov_type="type1",
                                 blob="abc", c_code="exploit it")
        Round.create(num=0)

        cable = ExploitSubmissionCable.create(team=team, cs=cs, exploit=exploit, throws=10, round=Round.current_round())
        assert_equals(len(ExploitSubmissionCable.most_recent()), 1)
        assert_equals(ExploitSubmissionCable.most_recent()[0].exploit.id, exploit.id)

        Round.create(num=1)
        Round.create(num=2)
        Round.create(num=3)

        # assert we get back the same most recent exploit after some rounds
        assert_equals(len(ExploitSubmissionCable.most_recent()), 1)
        assert_equals(ExploitSubmissionCable.most_recent()[0].exploit.id, exploit.id)

        Round.create(num=0)

        # assert we get back the same most recent exploit after a new game
        assert_equals(len(ExploitSubmissionCable.most_recent()), 1)
        assert_equals(ExploitSubmissionCable.most_recent()[0].exploit.id, exploit.id)
