#!/usr/bin/env python2
# -*- coding: utf-8 -*-

from __future__ import absolute_import, unicode_literals

from nose.tools import *

from . import setup_each, teardown_each
from farnsworth.models import (Exploit, ChallengeBinaryNode, AFLJob,
                               ChallengeSet, Round, Team)

BLOB = "exploit"


class TestExploit:
    def setup(self):
        setup_each()

    def teardown(self):
        teardown_each()

    def test_pov_type(self):
        cs = ChallengeSet.create(name="foo")
        cbn = ChallengeBinaryNode.create(name="foo", cs=cs, sha256="sum")
        job = AFLJob.create(cbn=cbn)
        exploit = Exploit.create(cbn=cbn, job=job, pov_type="type1", blob="exploit",
                                 c_code="exploit it")
        assert_equals(exploit.pov_type, "type1")

        def invalid_pov_type():
            Exploit.create(cbn=cbn, job=job, pov_type="bar")
        assert_raises(Exception, invalid_pov_type)

    def test_submit_to(self):
        r1 = Round.create(num=0)
        cs = ChallengeSet.create(name="foo")
        cs.rounds = [r1.id]
        cbn = ChallengeBinaryNode.create(name="foo", cs=cs)
        job = AFLJob.create(cbn=cbn)
        exploit = Exploit.create(job=job, cbn=cbn, pov_type="type1", blob=BLOB)
        team = Team.create(name="opponent")

        assert_equals(len(exploit.fieldings), 0)

        exploit.submit_to(team=team, throws=10)
        assert_equals(len(exploit.fieldings), 1)
        assert_equals(exploit.fieldings.get().team, team)
        assert_equals(exploit.fieldings.get().submission_round, Round.get_current())
